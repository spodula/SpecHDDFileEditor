package hddEditor.libs.partitions.cpm;

import hddEditor.libs.Speccy;

/**
 * This is a wrapper around a spectrum +3 dos file, its header and file types.
 * 
 * Every valid file +3 dos file has a header of these in the first 128 bytes of
 * the CPM file. It provides information such at the proper byte-level file size
 * (CPM has file sizes in 128 bytes) The filesize in the header includes the
 * header in its size.
 * 
 * In addition BASIC has its own header so it can tell what type of file of it.
 * It also has a file size. This DOES NOT include the header. Its the size of
 * the file as basic sees it. As such FileLength in the +3 basic header is
 * always 128 bytes lower than the one in the PLUS3DOS header.
 * 
 * Format of the header is:
 * 
 * 0-7 PLUS3DOS 8 Soft EOF character provided when reading and the file runs
 * out. (1A on the +3) 9 Issue number (1) 10 Version number (0) 11-14 Filesize
 * including the header length - LSB first 15-22 BASIC header (See below) 23-126
 * Reserved (0) 127 Checksum byte
 * 
 * Checksum is simply the modulus of the bytes from 0-126 Easily generated by
 * z80 by just adding all the bytes together and ignoring any carry's
 * 
 * 
 * BASIC header (bytes 15-22) This is similar to the tape header minus the
 * filename. See
 * https://sinclair.wiki.zxnet.co.uk/wiki/Spectrum_tape_interface#Header_block
 * for that information. ------------------------------ 0 File type (0=BASIC,
 * 1=Number array, 2=Character array, 3=code) 1-2 File length as seen by +3
 * BASIC 3-4 PROG: Program auto-Run line; 0x8000 = dont autorun. ARRAYS [4] =
 * encoded 1 chr variable name [1] CODE: default load address 5-6 PROG: Start of
 * variable area. Unused for CODE, arrays.
 * 
 * [1] Note for Character arrays, The array name (Always 1 char) is encoded as
 * follows: 1Y0XXXXX where Y=1 for String array, 0 for numeric. and XXXXX is the
 * charcter - 0x60
 *
 * Sources:
 * https://retrocomputing.stackexchange.com/questions/14486/what-file-formats-were-used-for-binary-executable-files-on-later-sinclair-zx-spe
 * https://worldofspectrum.org/ZXSpectrum128+3Manual/chapter8pt27.html
 * 
 * @author Graham
 *
 */

public class Plus3DosFileHeader {
	// +3 DOS HEADER data
	public String Signature = "";
	public int SoftEOF = 0;
	public int IssueNo = 0;
	public int VersionNo = 0;
	public int fileSize = 0;
	public int CheckSum = 0;
	public byte plus3BasicHeader[] = new byte[7];

	// Checksum valid?
	public boolean ChecksumValid;
	public boolean IsPlusThreeDosFile;

	// +3 basic header
	public int filetype = 0;
	public int filelength = 0;
	public int line = 0;
	public int loadAddr = 0;
	public int VariablesOffset = 0;
	public String VarName = "";

	// basic types
	public static int FILETYPE_BASIC = 0;
	public static int FILETYPE_NUMARRAY = 1;
	public static int FILETYPE_CHRARRAY = 2;
	public static int FILETYPE_CODE = 3;

	/**
	 * Create the object and populated from the passed block. This block must be >
	 * 127 bytes
	 * 
	 * @param block
	 */
	public Plus3DosFileHeader(byte[] block) {
		if (block.length < 0x80) {
			IsPlusThreeDosFile = false;
			ChecksumValid = false;
		} else {
			// parse out the +3 dos file header
			// first, the signature.
			for (int i = 0; i < 8; i++) {
				if ((block[i] > 31) && (block[i] < 127))
					Signature = Signature + (char) block[i];
			}
			SoftEOF = block[8];
			IssueNo = block[9];
			VersionNo = block[10];

			// filesize is a 32 bit value stored LSB first
			fileSize = (int) block[11] & 0xff;
			fileSize = fileSize + (((int) block[12] & 0xff) << 8);
			fileSize = fileSize + (((int) block[13] & 0xff) << 16);
			fileSize = fileSize + (((int) block[14] & 0xff) << 24);

			// Basic header data
			for (int i = 0; i < 7; i++) {
				plus3BasicHeader[i] = block[i + 15];
			}

			// checksum
			CheckSum = (int) block[127] & 0xff;

			// calculate the checksum
			int csum = 0;
			for (int i = 0; i < 127; i++) {
				csum = csum + (int) block[i] & 0xff;
			}
			csum = csum & 0xff;

			ChecksumValid = (csum == CheckSum);
			IsPlusThreeDosFile = ChecksumValid && Signature.equals("PLUS3DOS");

			// populate the basic header ONLY if valid
			if (IsPlusThreeDosFile) {
				filetype = plus3BasicHeader[0];
				if (filetype > 3) {
					filetype = 3;
				}

				filelength = ((int) plus3BasicHeader[2] & 0xff) * 0x100 + ((int) plus3BasicHeader[1] & 0xff);

				if (filetype == FILETYPE_BASIC) {
					line = ((int) plus3BasicHeader[4] & 0xff) * 0x100 + ((int) plus3BasicHeader[3] & 0xff);
					VariablesOffset = ((int) plus3BasicHeader[6] & 0xff) * 0x100 + ((int) plus3BasicHeader[5] & 0xff);
				} else if ((filetype == FILETYPE_NUMARRAY) || (filetype == FILETYPE_CHRARRAY)) {
					int c = (plus3BasicHeader[4] & 0x1f) + 0x60;
					VarName = String.valueOf((char) c);
					if (filetype == FILETYPE_CHRARRAY) {
						VarName = VarName + "$";
					}
				} else if (filetype == FILETYPE_CODE) {
					loadAddr = ((int) plus3BasicHeader[4] & 0xff) * 0x100 + ((int) plus3BasicHeader[3] & 0xff);
				}

			}
		}
	}

	/**
	 * Get a textual representation of the file type
	 * 
	 * 
	 * @return
	 */
	public String getTypeDesc() {
		return (Speccy.SpecFileTypeToString(filetype));
	}

}
